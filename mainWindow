import sys
from PyQt6.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, QWidget, QPushButton, QLineEdit, QLabel, QErrorMessage, QSlider, QSizePolicy
from PyQt6.QtCore import Qt
from matplotlib.backends.backend_qtagg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import numpy as np
import matplotlib.figure
from PyQt6.QtCore import QSize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
plt.rcParams['text.usetex'] = True

plt.rcParams["text.latex.preamble"]=r"\usepackage{amsmath}"
matplotlib.pyplot.set_loglevel("critical")
class EllipsoidPlotter(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Ellipsoid Plotter")
        self.main_widget = QWidget(self)
        
        self.layout = QHBoxLayout(self.main_widget)
        self.layout.contentsMargins=(0,0,0,0)
        
        self.figure = Figure()
        self.figure.set_size_inches(7.2,10)
     

        self.canvas = FigureCanvas(self.figure)
        

        self.layout.addWidget(self.canvas)


        self.setCentralWidget(self.main_widget)
        
       
    
        ####### Right part
        self.right_layout = QVBoxLayout()
        self.layout.addLayout(self.right_layout)
        self.a_input = QLineEdit(self)
        self.b_input = QLineEdit(self)
        self.c_input = QLineEdit(self)
        self.angle_input = QLineEdit(self)

        self.right_layout.addWidget(QLabel("Semi-axis a[cm]:"))
        self.right_layout.addWidget(self.a_input)
        self.right_layout.addWidget(QLabel("Semi-axis b[cm]:"))
        self.right_layout.addWidget(self.b_input)
        self.right_layout.addWidget(QLabel("Semi-axis c[cm]:"))
        self.right_layout.addWidget(self.c_input)

        self.plot_button = QPushButton("Plot", self)
        self.plot_button.clicked.connect(self.plot_ellipsoid)
        self.right_layout.addWidget(self.plot_button)
        self.zoom_slider = QSlider(Qt.Orientation.Vertical, self)
        self.zoom_slider.setMinimum(1)
        self.zoom_slider.setMaximum(20)
        self.zoom_slider.setValue(1)
        
        self.zoom_slider.valueChanged.connect(self.plot_ellipsoid)
        self.right_layout.addWidget(QLabel("Angle of deviaton[degrees]"))
        self.right_layout.addWidget(self.angle_input)
        self.right_layout.addWidget(self.zoom_slider)
        self.error_message = QErrorMessage(self)
        self.plot_ellipsoid()
       
        
        
            


    def plot_ellipsoid(self):
        try:
            a = float(self.a_input.text())
            b = float(self.b_input.text())
            c = float(self.c_input.text())
           
        except ValueError:
            if self.a_input.text() or self.b_input.text() or self.c_input.text():
                self.error_message.showMessage("Invalid input. Please enter real numbers for the semi-axes.")
            a = b = c = 0


        self.figure.clear()


        ax = self.figure.add_subplot(1,1,1, projection='3d',  position=[0, 0, 1, 1])
        
        
        ax.set_facecolor('black')
        ax.grid(color='green')

        ax.set_box_aspect(None, zoom=self.zoom_slider.value()/2)
        ax.set_xlabel('X, [cm]', color='green')
        ax.set_ylabel('Y, [cm]', color='green')
        ax.set_zlabel('Z, [cm]', color='green')
        ax.set_xlim([-20, 20])
        ax.set_ylim([-20, 20])
        ax.set_zlim([-20, 20])

        
        ax.tick_params(colors='green')

        u = np.linspace(0, 2 * np.pi, 100)
        v = np.linspace(np.pi/2, np.pi, 100)
        x = a * np.outer(np.cos(u), np.sin(v))
        y = b * np.outer(np.sin(u), np.sin(v))
        z = c * np.outer(np.ones(np.size(u)), np.cos(v))
        

# Apply the mask to x, y, and z
       

    
        ax.plot_surface(x, y, z, color='white', edgecolor='green')

        u1 = np.linspace(0, 2 * np.pi, 100)
        v1 = np.linspace(np.pi/2, np.pi, 100)
        x1 = a * np.outer(np.cos(u1), np.sin(v1))
        y1 = b * np.outer(np.sin(u1), np.sin(v1))
        z1 = 0 * np.outer(np.ones(np.size(u1)), np.cos(v1))
        ax.plot_surface(x1, y1, z1, color='white', edgecolor='green')
        ra=a*0.01
        rb=b*0.01
        rc=c*0.01
        rmass=(2*np.pi*ra*rb*rc)/(3*10)
        eq1 =  (r"$\hspace*{{1cm}}\text{{Tensor of Inertia}} \small \begin{{bmatrix}} kg*m^2*100 \end{{bmatrix}} \\"
                r" \normalsize \hspace*{{2cm}}"
                r"\begin{{bmatrix}}"
                r"{:.5f} & 0 & 0\\\\" # a^2
                r"0 & {:.5f} & 0\\\\" # b^2
                r"0 & 0 & {:.5f}"   # c^2
                r"\end{{bmatrix}}$").format((b**2+c**2)*rmass*100, (a**2+c**2)*rmass*100, (a**2+b**2)*rmass*100)
        ax.text2D(0, 1, eq1, transform=ax.transAxes, fontsize=15, verticalalignment='top', bbox=dict(boxstyle='round', facecolor='white', alpha=0.8))
        ax.quiver(0, 0, 0, 10, 0, 0, color='white', alpha=1, lw=3)  # Vector (1,0,0)
        ax.quiver(0, 0, 0, 0, 10, 0, color='white', alpha=1, lw=3)  # Vector (0,1,0)
        ax.quiver(0, 0, 0, 0, 0, 10, color='white', alpha=1, lw=3)

        self.canvas.draw()
          
        
        
        

        

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = EllipsoidPlotter()
    window.show()
    sys.exit(app.exec())

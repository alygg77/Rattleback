import sys
from PyQt6.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, QWidget, QPushButton, QLineEdit, QLabel, QErrorMessage, QSlider, QSizePolicy
from PyQt6.QtCore import Qt
from matplotlib.backends.backend_qtagg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import numpy as np
import matplotlib.figure
from PyQt6.QtCore import QSize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
plt.rcParams['text.usetex'] = True

plt.rcParams["text.latex.preamble"]=r"\usepackage{amsmath}"
matplotlib.pyplot.set_loglevel("critical")
class EllipsoidPlotter(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Ellipsoid Plotter")
        self.main_widget = QWidget(self)
        
        self.layout = QHBoxLayout(self.main_widget)
        self.layout.contentsMargins=(0,0,0,0)
        
        self.figure = Figure()
        self.figure.set_size_inches(7.2,10)
     

        self.canvas = FigureCanvas(self.figure)
        

        self.layout.addWidget(self.canvas)


        self.setCentralWidget(self.main_widget)
        
       
    
        ####### Right part
        self.right_layout = QVBoxLayout()
        self.layout.addLayout(self.right_layout)
        ####### Inputs
        self.a_input = QLineEdit(self)
        self.b_input = QLineEdit(self)
        self.c_input = QLineEdit(self)
        self.angle_input = QLineEdit(self)
        self.lenght_input = QLineEdit(self)
        self.density_input=QLineEdit(self)
        self.devmass_input=QLineEdit(self)

        self.right_layout.addWidget(QLabel("Semi-axis x-a[cm]:"))
        self.right_layout.addWidget(self.a_input)
        self.right_layout.addWidget(QLabel("Semi-axis y-b[cm]:"))
        self.right_layout.addWidget(self.b_input)
        self.right_layout.addWidget(QLabel("Semi-axis z-c[cm]:"))
        self.right_layout.addWidget(self.c_input)
        self.right_layout.addWidget(QLabel("density[kg/m^3]:"))
        self.right_layout.addWidget(self.density_input)

       
        self.zoom_slider = QSlider(Qt.Orientation.Vertical, self)
        self.zoom_slider.setMinimum(1)
        self.zoom_slider.setMaximum(20)
        self.zoom_slider.setValue(1)
        
        self.zoom_slider.valueChanged.connect(self.plot_ellipsoid)

        self.right_layout.addWidget(QLabel("Angle of deviaton[degrees]:"))
        self.right_layout.addWidget(self.angle_input)
        self.right_layout.addWidget(QLabel("Lenght of deviation[cm]:"))
        self.right_layout.addWidget(self.lenght_input)
        self.right_layout.addWidget(QLabel("Mass of deviation[g]:"))
        self.right_layout.addWidget(self.devmass_input)
        self.plot_button = QPushButton("Calculator", self)
        self.plot_button.clicked.connect(self.plot_ellipsoid)
        self.right_layout.addWidget(self.plot_button)

        self.right_layout.addWidget(self.zoom_slider)
        self.error_message = QErrorMessage(self)
        self.plot_ellipsoid()
       
        
        
            


    def plot_ellipsoid(self):
        
       
        try:
            a = float(self.a_input.text())
            b = float(self.b_input.text())
            c = float(self.c_input.text())
            density = float(self.density_input.text())
            angle = float(self.angle_input.text())
            lenght = float(self.lenght_input.text())
            devmass = float(self.devmass_input.text())
            
           
        except ValueError:
            if self.a_input.text() or self.b_input.text() or self.c_input.text() or self.density_input.text() or self.angle_input.text() or self.lenght_input.text() or self.devmass_input.text():
                self.error_message.showMessage("Invalid input. Please enter real numbers for the semi-axes.")
            a = b = c = lenght = density = devmass = angle = 0



        self.figure.clear()


        ax = self.figure.add_subplot(1,1,1, projection='3d',  position=[0, 0, 1, 1])
        
        
        ax.set_facecolor('black')
        ax.grid(color='green')

        ax.set_box_aspect(None, zoom=self.zoom_slider.value()/2)
        ax.set_xlabel('X, [cm]', color='green')
        ax.set_ylabel('Y, [cm]', color='green')
        ax.set_zlabel('Z, [cm]', color='green')
        ax.set_xlim([-20, 20])
        ax.set_ylim([-20, 20])
        ax.set_zlim([-20, 20])

        
        ax.tick_params(colors='green')

        u = np.linspace(0, 2 * np.pi, 100)
        v = np.linspace(np.pi/2, np.pi, 100)
        x = a * np.outer(np.cos(u), np.sin(v))
        y = b * np.outer(np.sin(u), np.sin(v))
        z = c * np.outer(np.ones(np.size(u)), np.cos(v))
        
       

    
        ax.plot_surface(x, y, z, color='white', edgecolor='green', zorder = 0.5)

        u1 = np.linspace(0, 2 * np.pi, 100)
        v1 = np.linspace(np.pi/2, np.pi, 100)
        x1 = a * np.outer(np.cos(u1), np.sin(v1))
        y1 = b * np.outer(np.sin(u1), np.sin(v1))
        z1 = 0 * np.outer(np.ones(np.size(u1)), np.cos(v1))
  
        
        ra=a*0.01
        rb=b*0.01
        rc=c*0.01
        xchange = 2*devmass*0.001*((lenght*0.01*np.sin(np.radians(angle)))**2)
        ychange = 2*devmass*0.001*((lenght*0.01*np.cos(np.radians(angle)))**2)
        xychange = -1*devmass*0.001*(lenght**2)*(np.sin(np.radians(angle*2)))
        rmass=(2*np.pi*ra*rb*rc*density)/(3*10)
        eq1 =  (r"$\hspace*{{1cm}}\text{{Tensor of Inertia}} \small \begin{{bmatrix}} \frac{{kg*m^2}}{{10^6}} \end{{bmatrix}} \\"
                r" \normalsize \hspace*{{2cm}}"
                r"\begin{{bmatrix}}"
                r"{:.5f} & 0 & 0\\\\" # a^2
                r"0 & {:.5f} & 0\\\\" # b^2
                r"0 & 0 & {:.5f}"   # c^2
                r"\end{{bmatrix}}$").format((rb**2+rc**2)*rmass*(10**6), (ra**2+rc**2)*rmass*(10**6), (ra**2+rb**2)*rmass*(10**6))
        eq2 =  (r"$\hspace*{{1cm}}\text{{Tensor of Inertia''}} \small \begin{{bmatrix}} \frac{{kg*m^2}}{{10^6}} \end{{bmatrix}} \\"
                r" \normalsize \hspace*{{2cm}}"
                r"\begin{{bmatrix}}"
                r"{:.5f} & {:.5f} & 0\\\\" # a^2
                r"{:.5f} & {:.5f} & 0\\\\" # b^2
                r"0 & 0 & {:.5f}"   # c^2
                r"\end{{bmatrix}}$").format(((rb**2+rc**2)*rmass+xchange)*(10**6),xychange, xychange, ((ra**2+rc**2)*rmass+ychange)*(10**6), ((ra**2+rb**2)*rmass+xchange+ychange)*(10**6))
        
        ax.text2D(0, 1, eq1, transform=ax.transAxes, fontsize=15, verticalalignment='top', bbox=dict(boxstyle='round', facecolor='white', alpha=0.8))
        ax.text2D(0.7, 1, eq2, transform=ax.transAxes, fontsize=15, verticalalignment='top', bbox=dict(boxstyle='round', facecolor='white', alpha=0.8))
        
        
        #### Plotting
        ax.plot_surface(x, y, z, color='white')
        ax.plot_surface(x1, y1, z1, color = 'white', zorder = 1)
        ax.quiver(-20, 20, -20, 20, 0, 0, color='red', alpha=1, lw=3, zorder = 10000) 
        ax.quiver(-20, 20, -20, 0, 20, 0, color='green', alpha=1, lw=3)  
        ax.quiver(-20, 20, -20, 0, 0, 20, color='blue', alpha=1, lw=3)
        
        #### Plotting
    
        self.canvas.draw()
        
          
        
        
        

        

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = EllipsoidPlotter()
    window.show()
    sys.exit(app.exec())
